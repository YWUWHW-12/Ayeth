const { cmd } = require('../command');
const axios = require('axios');
const { updateEnv, readEnv } = require('../lib/database');

cmd({
  pattern: "likee",
  alias: ["lkdl", "likee-dl"],
  desc: "To download Likee videos.",
  react: "üé•",
  category: "download",
  filename: __filename
}, async (conn, m, store, { from, q, reply }) => {
  try {
    // Config ‡∂ë‡∂ö‡∑ô‡∂±‡∑ä LANGUAGE ‡∂ö‡∑í‡∂∫‡∑Ä‡∂±‡∑Ä‡∑è
    const env = await readEnv();
    const language = env.LANGUAGE ? env.LANGUAGE.toLowerCase() : 'english';

    // ‡∂∑‡∑è‡∑Ç‡∑è‡∑Ä ‡∂Ö‡∂±‡∑î‡∑Ä ‡∂¥‡∂´‡∑í‡∑Ä‡∑í‡∂©
    const messages = {
      sinhala: {
        invalidLink: "‚ùå ‡∂ö‡∂ª‡∑î‡∂´‡∑è‡∂ö‡∂ª ‡∑Ä‡∂Ω‡∂Ç‡∂ú‡∑î Likee ‡∑É‡∂∂‡∑ê‡∂≥‡∑í‡∂∫‡∂ö‡∑ä ‡∂Ø‡∑ô‡∂±‡∑ä‡∂±.",
        failedFetch: "‚ö†Ô∏è Likee ‡∂Ö‡∂±‡∑ä‡∂≠‡∂ª‡∑ä‡∂ú‡∂≠‡∂∫ ‡∂Ω‡∂∂‡∑è ‡∂ú‡∑ê‡∂±‡∑ì‡∂∏‡∂ß ‡∂Ö‡∂¥‡∑ú‡∑Ñ‡∑ú‡∑É‡∂≠‡∑ä ‡∑Ä‡∑î‡∂´‡∑è. ‡∂ö‡∂ª‡∑î‡∂´‡∑è‡∂ö‡∂ª ‡∑É‡∂∂‡∑ê‡∂≥‡∑í‡∂∫ ‡∂¥‡∂ª‡∑ì‡∂ö‡∑ä‡∑Ç‡∑è ‡∂ö‡∂ª ‡∂±‡∑ê‡∑Ä‡∂≠ ‡∂ã‡∂≠‡∑ä‡∑É‡∑è‡∑Ñ ‡∂ö‡∂ª‡∂±‡∑ä‡∂±.",
        successCaption: (title) => `> *·¥ò·¥è·¥°·¥á Ä·¥Ö  ô è  ·¥ã·¥Ä·¥†…™·¥Ö·¥ú  Ä·¥ÄÍú±·¥Ä…¥…¢·¥Ä : )**\n
üíö *‡∂∏‡∑è‡∂≠‡∑ò‡∂ö‡∑è‡∑Ä:* ${title}\n
üíö *‡∂¥‡∑ä‚Äç‡∂ª‡∂∏‡∑è‡∂´‡∂∫:* ‡∂Ω‡∂∂‡∑è ‡∂ú‡∂≠ ‡∂±‡∑ú‡∑Ñ‡∑ê‡∂ö`,
        error: "‚ùå ‡∂î‡∂∂‡∑ö ‡∂â‡∂Ω‡∑ä‡∂Ω‡∑ì‡∂∏ ‡∑É‡∂ö‡∑É‡∂± ‡∑Ä‡∑í‡∂ß ‡∂Ø‡∑ù‡∑Ç‡∂∫‡∂ö‡∑ä ‡∂á‡∂≠‡∑í ‡∑Ä‡∑î‡∂´‡∑è. ‡∂ö‡∂ª‡∑î‡∂´‡∑è‡∂ö‡∂ª ‡∂±‡∑ê‡∑Ä‡∂≠ ‡∂ã‡∂≠‡∑ä‡∑É‡∑è‡∑Ñ ‡∂ö‡∂ª‡∂±‡∑ä‡∂±."
      },
      english: {
        invalidLink: "‚ùå Please provide a valid Likee link.",
        failedFetch: "‚ö†Ô∏è Failed to fetch Likee content. Please check the link and try again.",
        successCaption: (title) => `> *·¥ò·¥è·¥°·¥á Ä·¥Ö  ô è  ·¥ã·¥Ä·¥†…™·¥Ö·¥ú  Ä·¥ÄÍú±·¥Ä…¥…¢·¥Ä : )**\n
üíö *Title:* ${title}\n
üíö *Size:* Not available`,
        error: "‚ùå An error occurred while processing your request. Please try again."
      }
    };

    const msg = messages[language] || messages.english; // ‡∂∑‡∑è‡∑Ç‡∑è‡∑Ä ‡∑Ñ‡∂∏‡∑î ‡∂±‡∑ú‡∑Ä‡∑î‡∂´‡∑ú‡∂≠‡∑ä ‡∂â‡∂Ç‡∂ú‡∑ä‚Äç‡∂ª‡∑ì‡∑É‡∑í default ‡∂Ω‡∑ô‡∑É

    if (!q || !q.startsWith("http")) {
      return reply(msg.invalidLink);
    }

    await conn.sendMessage(from, {
      react: { text: "‚è≥", key: m.key }
    });

    // Modified API call with new endpoint
    const response = await axios.get(`https://bk9.fun/download/likee?url=${encodeURIComponent(q)}`);
    const data = response.data;

    if (!data || data.status !== true || !data.BK9) {
      return reply(msg.failedFetch);
    }

    // Constructing the video download URL based on the API response
    const videoUrl = data.BK9.withoutwatermark; // or `withWatermark` if needed

    // Sending the video
    await conn.sendMessage(from, {
      video: { url: videoUrl },
      mimetype: "video/mp4",
      caption: msg.successCaption(data.BK9.title)
    }, { quoted: m });

  } catch (error) {
    console.error("Error:", error);
    const env = await readEnv();
    const language = env.LANGUAGE ? env.LANGUAGE.toLowerCase() : 'english';
    const msg = messages[language] || messages.english;
    reply(msg.error);
  }
});
